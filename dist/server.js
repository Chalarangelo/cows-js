#!/usr/bin/env node
"use strict";function _interopDefault(a){return a&&"object"==typeof a&&"default"in a?a["default"]:a}var yargs=_interopDefault(require("yargs")),readline=_interopDefault(require("readline")),process$1=_interopDefault(require("process")),chalk=_interopDefault(require("chalk")),express=_interopDefault(require("express")),bodyParser=_interopDefault(require("body-parser")),http=_interopDefault(require("http")),path=_interopDefault(require("path")),ws=_interopDefault(require("ws")),options=yargs.option("port",{alias:"p",describe:"The port that the application will run on.",default:5e3,number:"number"}).option("cleanup",{alias:"c",describe:"Cleanup all data files after the server finishes running.",default:!0,type:"boolean"}),args=options,rl=readline.createInterface({input:process.stdin,output:process.stdout});rl.on("line",function(a){"exit"===a.trim()&&process.exit(0)});var exitHandler=function(a){var b=function(b){return function(c){a.cleanup&&console.log(chalk.yellow("Cleaning up data files...")),"uncaughtException"===b?(console.log(chalk.red("Exiting due to an uncaughtException...")),console.log(chalk.red(c)),process$1.exit(1)):(console.log(chalk.yellow("Exiting normally or due to user termination...")),process$1.exit(0))}};["exit","SIGINT","SIGUSR1","SIGUSR2","uncaughtException","SIGTERM"].forEach(function(a){process$1.on(a,b(a))})},exitHandler_1=exitHandler,usernameHandler={users:[],checkUsername:function(a){return!this.users.map(function(a){return a.username}).includes(a)&&a.trim()},addUsername:function(a,b){this.users.push({username:a.trim(),ip:b})},removeUsername:function(a){this.users=this.users.filter(function(b){return b.username!==a})},findUsername:function(a){return this.users.filter(function(b){return b.ip===a})[0].username}},usernameHandler_1=usernameHandler,router=express.Router(),customRouter=function(a){return router.use(bodyParser.json()),router.post("/users",function(b,c){var d=b.body.username;a.checkUsername(d)?(a.addUsername(d,b.ip),c.setHeader("Content-Type","application/json"),c.status(200).send(JSON.stringify({username:d}))):(c.setHeader("Content-Type","application/json"),c.status(409).send(JSON.stringify({username:void 0})))}),router},router_1=customRouter,argv=args.argv,exitHandler$1=exitHandler_1(argv),router$1=router_1(usernameHandler_1),app=express();app.use(express.static(path.join(__dirname,"public"))),app.use("/",router$1);var server=http.createServer(app),socketServer=new ws.Server({server:server,clientTracking:!0});socketServer.on("connection",function(a,b){console.log(chalk.cyan("Established connection with client on the following IP address: ".concat(b.connection.remoteAddress))),a.send("Hello there, I am the server!"),a.isAlive=!0,a.ip=b.connection.remoteAddress,a.on("message",function(a){socketServer.clients.forEach(function(c){c.send("".concat(usernameHandler_1.findUsername(b.connection.remoteAddress),": ").concat(a))})}),setInterval(function(){socketServer.clients.forEach(function(a){return a.isAlive?void(a.isAlive=!1,a.ping(null,!1,!0)):(console.log(chalk.cyan("Terminating connection with client on the following IP address: ".concat(a.ip," - Cannot reach client at this time."))),usernameHandler_1.removeUsername(usernameHandler_1.findUsername(a.ip)),a.terminate())})},1e3),a.on("pong",function(){a.isAlive=!0}),a.on("close",function(b,c){console.log(chalk.cyan("Terminating connection with client on the following IP address: ".concat(a.ip," -").concat(c,"(").concat(b,")"))),usernameHandler_1.removeUsername(usernameHandler_1.findUsername(a.ip)),a.terminate()})}),server.listen(argv.port,function(){console.log(chalk.green("Server started.")),console.log(chalk.green("Listening on port ".concat(argv.port,"...")))});var server_1={};module.exports=server_1;
